apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ template "todo-app.namespace" . }}
  name: todo-postgres
  labels:
    app: todo-app
    todo-app-deployment: todo-postgres
spec:
  replicas: {{ .Values.BACKEND.STATEFUL.POSTGRES.REPLICAS }}
  selector:
    matchLabels:
      todo-app-pod: todo-postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        todo-app-pod: todo-postgres
    spec:
      restartPolicy: Always
      initContainers:
        - name: init-todo-postgres
          image: busybox:1.28
          command: ['sh', '-c', 'printenv']
          envFrom:
            - secretRef:
                name: todo-secret
      containers:
        - name: todo-postgres
          image: {{ .Values.VARS.DOCKER.HUB.ID }}/todo-postgres:{{ .Values.BACKEND.STATEFUL.POSTGRES.IMAGE.TAG }}
          imagePullPolicy: {{ .Values.BACKEND.STATEFUL.POSTGRES.IMAGE.PULLPOLICY }}
          envFrom:
            - configMapRef:
                name: todo-config
            - secretRef:
                name: todo-secret
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: todo-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: todo-secret
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: todo-secret
                  key: POSTGRES_DB
          ports:
            - containerPort: {{ .Values.BACKEND.STATEFUL.POSTGRES.PORT.CLUSTER }}
          resources:
            limits:
              memory: {{ .Values.BACKEND.STATEFUL.POSTGRES.MEMORY }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
          readinessProbe:
            exec:
              command: [ 'sh' , '-c', 'pg_isready -h localhost -U ${POSTGRES_USER}' ]
            initialDelaySeconds: 5
            timeoutSeconds: 1
            successThreshold: 3
          livenessProbe:
            exec:
              command: [ 'sh' , '-c', 'pg_isready -h localhost -U ${POSTGRES_USER}' ]
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
